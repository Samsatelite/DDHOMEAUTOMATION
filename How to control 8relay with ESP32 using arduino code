/*********
  David And Dolapo
  Complete project work on 8Ralay, ESP32 automation 
*********/

// Load Wi-Fi library
#include <WiFi.h>

// Replace with your network credentials
const char* ssid = "DDAUTOMATION";
const char* password = "DDAUTOMATION";

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
String output26State = "off";
String output27State = "off";
String output21State = "off";
String output23State = "off";
String output19State = "off";
String output32State = "off";
String output33State = "off";
String output12State = "off";
String output5State = "off";



// Assign output variables to GPIO pins
const int output26 = 26;
const int output27 = 27;
const int output21 = 21;
const int output23 = 23;
const int output19 = 19;
const int output32 = 32;
const int output33 = 33;
const int output12 = 12;
const int output5 = 5;




// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0; 
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

void setup() {
  Serial.begin(115200);
  // Initialize the output variables as outputs
  pinMode(output26, OUTPUT);
  pinMode(output27, OUTPUT);
  pinMode(output21, OUTPUT);
  pinMode(output23, OUTPUT);
  pinMode(output19, OUTPUT);
  pinMode(output32, OUTPUT);
  pinMode(output33, OUTPUT);
  pinMode(output12, OUTPUT);
  pinMode(output5, OUTPUT);



  // Set outputs to LOW
  digitalWrite(output26, LOW);
  digitalWrite(output27, LOW);
  digitalWrite(output21, LOW);
  digitalWrite(output23, LOW);
  digitalWrite(output19, LOW);
  digitalWrite(output32, LOW);
  digitalWrite(output33, LOW);
  digitalWrite(output12, LOW);
  digitalWrite(output5, LOW);

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop(){
  WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            // turns the GPIOs on and off
            if (header.indexOf("GET /26/on") >= 0) {
              Serial.println("GPIO 26 on");
              output26State = "on";
              digitalWrite(output26, HIGH);
            } else if (header.indexOf("GET /26/off") >= 0) {
              Serial.println("GPIO 26 off");
              output26State = "off";
              digitalWrite(output26, LOW);
            } else if (header.indexOf("GET /27/on") >= 0) {
              Serial.println("GPIO 27 on");
              output27State = "on";
              digitalWrite(output27, HIGH);
            } else if (header.indexOf("GET /27/off") >= 0) {
              Serial.println("GPIO 27 off");
              output27State = "off";
              digitalWrite(output27, LOW);
            } else if (header.indexOf("GET /21/on") >= 0) {
              Serial.println("GPIO 21 on");
              output21State = "on";
              digitalWrite(output21, HIGH);
            } else if (header.indexOf("GET /21/off") >= 0) {
              Serial.println("GPIO 21 off");
              output21State = "off";
              digitalWrite(output21, LOW);
            } else if (header.indexOf("GET /23/on") >= 0) {
              Serial.println("GPIO 23 on");
              output23State = "on";
              digitalWrite(output23, HIGH);
            } else if (header.indexOf("GET /23/off") >= 0) {
              Serial.println("GPIO 23 off");
              output23State = "off";
              digitalWrite(output23, LOW);
            } else if (header.indexOf("GET /19/on") >= 0) {
              Serial.println("GPIO 19 on");
              output19State = "on";
              digitalWrite(output19, HIGH);
            } else if (header.indexOf("GET /19/off") >= 0) {
              Serial.println("GPIO 19 off");
              output19State = "off";
              digitalWrite(output19, LOW);
            } else if (header.indexOf("GET /32/on") >= 0) {
              Serial.println("GPIO 32 on");
              output32State = "on";
              digitalWrite(output32, HIGH);
            } else if (header.indexOf("GET /32/off") >= 0) {
              Serial.println("GPIO 32 off");
              output32State = "off";
              digitalWrite(output32, LOW);
            } else if (header.indexOf("GET /33/on") >= 0) {
              Serial.println("GPIO 33 on");
              output33State = "on";
              digitalWrite(output33, HIGH);
            } else if (header.indexOf("GET /33/off") >= 0) {
              Serial.println("GPIO 33 off");
              output33State = "off";
              digitalWrite(output33, LOW);
            }else if (header.indexOf("GET /12/on") >= 0) {
              Serial.println("GPIO 12 on");
              output12State = "on";
              digitalWrite(output12, HIGH);
            } else if (header.indexOf("GET /12/off") >= 0) {
              Serial.println("GPIO 12 off");
              output12State = "off";
              digitalWrite(output12, LOW);
            } else if (header.indexOf("GET /5/on") >= 0) {
              Serial.println("GPIO 5 on");
              output5State = "on";
              digitalWrite(output5, HIGH);
            } else if (header.indexOf("GET /5/off") >= 0) {
              Serial.println("GPIO 5 off");
              output5State = "off";
              digitalWrite(output5, LOW);
            }
           

            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center; background-color: #C0C0C0;}");
            client.println(".button { background-color: #FF6347; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");
            
            // Web Page Heading
            client.println("<body><p><h1>DOLAPO AND DAVID ESP32 WEB SERVER</h1></p>");

            client.println("<body><h2>Push the buttons to switch devices </h2>");

            // If the output5State is off, it displays the ON button       
            if (output5State=="off") {
              client.println("<p><a href=\"/5/on\"><button class=\"button\">DOOR BELL</button></a></p>");
            } else {
              client.println("<p><a href=\"/5/off\"><button class=\"button button2\">DOOR BELL</button></a></p>");
            } 
             // Display current state, and ON/OFF buttons for GPIO 5  
            client.println("<p>door bell is &nbsp;" + output5State + "</p>");

            // If the output12State is off, it displays the ON button       
            if (output12State=="off") {
              client.println("<p><a href=\"/12/on\"><button class=\"button\">SECURITY LIGHT</button></a></p>");
            } else {
              client.println("<p><a href=\"/12/off\"><button class=\"button button2\">SECURITY LIGHT</button></a></p>");
            } 
             // Display current state, and ON/OFF buttons for GPIO 12  
            client.println("<p>security light is &nbsp;" + output12State + "</p>");
            
            
            // If the output33State is off, it displays the ON button       
            if (output33State=="off") {
              client.println("<p><a href=\"/33/on\"><button class=\"button\">ROOM 1</button></a></p>");
            } else {
              client.println("<p><a href=\"/33/off\"><button class=\"button button2\">ROOM 1</button></a></p>");
            } 
            // Display current state, and ON/OFF buttons for GPIO 33  
            client.println("<p>room 1 is &nbsp;" + output33State + "</p>");
           
            
            // If the output32State is off, it displays the ON button       
            if (output32State=="off") {
              client.println("<p><a href=\"/32/on\"><button class=\"button\">ROOM 2</button></a></p>");
           } else {
              client.println("<p><a href=\"/32/off\"><button class=\"button button2\">ROOM 2</button></a></p>");
            } 
            // Display current state, and ON/OFF buttons for GPIO 32  
            client.println("<p>room 2 is &nbsp;" + output32State + "</p>");


            // If the output26State is off, it displays the ON button       
            if (output26State=="off") {
              client.println("<p><a href=\"/26/on\"><button class=\"button\">FAN</button></a></p>");
            } else {
              client.println("<p><a href=\"/26/off\"><button class=\"button button2\">FAN</button></a></p>");
            } 
             // Display current state, and ON/OFF buttons for GPIO 26  
            client.println("<p> fan is &nbsp;" + output26State + "</p>");

            
            
            // If the output19State is off, it displays the ON button       
            if (output19State=="off") {
              client.println("<p><a href=\"/19/on\"><button class=\"button\">SOCKET 1</button></a></p>");
            } else {
              client.println("<p><a href=\"/19/off\"><button class=\"button button2\">SOCKET 1</button></a></p>");
            } 
            // Display current state, and ON/OFF buttons for GPIO 19  
            client.println("<p>socket 1 is &nbsp;" + output19State + "</p>");

            
           
            // If the output23State is off, it displays the ON button       
            if (output23State=="off") {
              client.println("<p><a href=\"/23/on\"><button class=\"button\">SOCKET 2</button></a></p>");
            } else {
              client.println("<p><a href=\"/23/off\"><button class=\"button button2\">SOCKET 2</button></a></p>");
            } 
             // Display current state, and ON/OFF buttons for GPIO 23  
            client.println("<p> socket 2 is &nbsp;" + output23State + "</p>");

            
            // If the output21State is off, it displays the ON button       
            if (output21State=="off") {
              client.println("<p><a href=\"/21/on\"><button class=\"button\">SOCKET 3</button></a></p>");
           } else {
              client.println("<p><a href=\"/21/off\"><button class=\"button button2\">SOCKET 3</button></a></p>");
            } 
            // Display current state, and ON/OFF buttons for GPIO 21  
            client.println("<p>socket 3 light is &nbsp;" + output21State + "</p>");

            
           
            // If the output27State is off, it displays the ON button       
            if (output27State=="off") {
              client.println("<p><a href=\"/27/on\"><button class=\"button\">SOCKET 4</button></a></p>");
            } else {
              client.println("<p><a href=\"/27/off\"><button class=\"button button2\">SOCKET 4</button></a></p>");
            } 
             // Display current state, and ON/OFF buttons for GPIO 27  
            client.println("<p>socket 4 is &nbsp;" + output27State + "</p>");
               

            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
